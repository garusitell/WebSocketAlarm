{"ast":null,"code":"var _jsxFileName = \"/Users/iseonbin/Documents/Prgrammers/demo/frontend/src/components/NotificationComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Client } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationComponent = () => {\n  _s();\n  const [notifications, setNotifications] = useState([]);\n  const [stompClient, setStompClient] = useState(null);\n  const [username] = useState('user1'); // 로그인된 사용자라고 가정\n\n  useEffect(() => {\n    const client = new Client({\n      webSocketFactory: () => new SockJS('http://localhost:8080/ws'),\n      reconnectDelay: 5000,\n      onConnect: () => {\n        console.log('✅ WebSocket 연결 성공');\n        client.subscribe(`/user/${username}/queue/notifications`, message => {\n          const newNotification = {\n            id: new Date().getTime(),\n            content: message.body,\n            isNew: true\n          };\n          setNotifications(prev => [newNotification, ...prev]);\n        });\n      },\n      onStompError: frame => {\n        console.error('STOMP 오류:', frame);\n      }\n    });\n    client.activate();\n    setStompClient(client);\n    const fetchUnreadNotifications = async () => {\n      try {\n        const response = await fetch(`http://localhost:8080/notifications/${username}`);\n        const data = await response.json();\n        const unreadNotifications = data.map(notif => ({\n          id: notif.id,\n          content: `(미수신) ${notif.content}`,\n          isNew: false\n        }));\n        setNotifications(prev => [...unreadNotifications, ...prev]);\n      } catch (error) {\n        console.error('미수신 알림 로딩 실패:', error);\n      }\n    };\n    fetchUnreadNotifications();\n    return () => {\n      if (client) {\n        client.deactivate();\n        console.log('⏹️ WebSocket 연결 해제');\n      }\n    };\n  }, [username]);\n  const sendNotification = async () => {\n    try {\n      await fetch('http://localhost:8080/send-notification', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          toUser: username,\n          content: '버튼 클릭으로 생성된 알림'\n        })\n      });\n    } catch (error) {\n      console.error('알림 생성 요청 실패:', error);\n    }\n  };\n  const markAsRead = notificationId => {\n    if (stompClient && stompClient.connected && notificationId) {\n      stompClient.publish({\n        destination: '/app/mark-as-read',\n        body: JSON.stringify({\n          notificationId: notificationId\n        })\n      });\n      setNotifications(prev => prev.filter(n => n.id !== notificationId));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"notification-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uC54C\\uB9BC \\uC2DC\\uC2A4\\uD15C \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\uD604\\uC7AC \\uC0AC\\uC6A9\\uC790: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendNotification,\n      children: \"\\uB098\\uC5D0\\uAC8C \\uD14C\\uC2A4\\uD2B8 \\uC54C\\uB9BC \\uBCF4\\uB0B4\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"\\uC54C\\uB9BC \\uBAA9\\uB85D (\", notifications.length, \"\\uAC1C)\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"notification-list\",\n      children: notifications.length > 0 ? notifications.map(notif => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: notif.isNew ? 'new-notification' : '',\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: notif.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 29\n        }, this), !notif.isNew && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => markAsRead(notif.id),\n          className: \"read-button\",\n          children: \"\\uC77D\\uC74C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 33\n        }, this)]\n      }, notif.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 25\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\uD45C\\uC2DC\\uD560 \\uC54C\\uB9BC\\uC774 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n};\n_s(NotificationComponent, \"sRBT+spbdYLMONTUPEnLp+26GqA=\");\n_c = NotificationComponent;\nexport default NotificationComponent;\nvar _c;\n$RefreshReg$(_c, \"NotificationComponent\");","map":{"version":3,"names":["React","useState","useEffect","Client","SockJS","jsxDEV","_jsxDEV","NotificationComponent","_s","notifications","setNotifications","stompClient","setStompClient","username","client","webSocketFactory","reconnectDelay","onConnect","console","log","subscribe","message","newNotification","id","Date","getTime","content","body","isNew","prev","onStompError","frame","error","activate","fetchUnreadNotifications","response","fetch","data","json","unreadNotifications","map","notif","deactivate","sendNotification","method","headers","JSON","stringify","toUser","markAsRead","notificationId","connected","publish","destination","filter","n","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","length","_c","$RefreshReg$"],"sources":["/Users/iseonbin/Documents/Prgrammers/demo/frontend/src/components/NotificationComponent.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Client } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\n\nconst NotificationComponent = () => {\n    const [notifications, setNotifications] = useState([]);\n    const [stompClient, setStompClient] = useState(null);\n    const [username] = useState('user1'); // 로그인된 사용자라고 가정\n\n    useEffect(() => {\n        const client = new Client({\n            webSocketFactory: () => new SockJS('http://localhost:8080/ws'),\n            reconnectDelay: 5000,\n            onConnect: () => {\n                console.log('✅ WebSocket 연결 성공');\n                client.subscribe(`/user/${username}/queue/notifications`, (message) => {\n                    const newNotification = {\n                        id: new Date().getTime(),\n                        content: message.body,\n                        isNew: true\n                    };\n                    setNotifications(prev => [newNotification, ...prev]);\n                });\n            },\n            onStompError: (frame) => {\n                console.error('STOMP 오류:', frame);\n            },\n        });\n\n        client.activate();\n        setStompClient(client);\n\n        const fetchUnreadNotifications = async () => {\n            try {\n                const response = await fetch(`http://localhost:8080/notifications/${username}`);\n                const data = await response.json();\n                const unreadNotifications = data.map(notif => ({\n                    id: notif.id,\n                    content: `(미수신) ${notif.content}`,\n                    isNew: false\n                }));\n                setNotifications(prev => [...unreadNotifications, ...prev]);\n            } catch (error) {\n                console.error('미수신 알림 로딩 실패:', error);\n            }\n        };\n\n        fetchUnreadNotifications();\n\n        return () => {\n            if (client) {\n                client.deactivate();\n                console.log('⏹️ WebSocket 연결 해제');\n            }\n        };\n    }, [username]);\n\n    const sendNotification = async () => {\n        try {\n            await fetch('http://localhost:8080/send-notification', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ toUser: username, content: '버튼 클릭으로 생성된 알림' }),\n            });\n        } catch (error) {\n            console.error('알림 생성 요청 실패:', error);\n        }\n    };\n\n    const markAsRead = (notificationId) => {\n        if (stompClient && stompClient.connected && notificationId) {\n            stompClient.publish({\n                destination: '/app/mark-as-read',\n                body: JSON.stringify({ notificationId: notificationId }),\n            });\n            setNotifications(prev => prev.filter(n => n.id !== notificationId));\n        }\n    };\n\n    return (\n        <div className=\"notification-container\">\n            <h2>알림 시스템 </h2>\n            <p>현재 사용자: <strong>{username}</strong></p>\n            <button onClick={sendNotification}>나에게 테스트 알림 보내기</button>\n            <hr />\n            <h3>알림 목록 ({notifications.length}개)</h3>\n            <ul className=\"notification-list\">\n                {notifications.length > 0 ? (\n                    notifications.map((notif) => (\n                        <li key={notif.id} className={notif.isNew ? 'new-notification' : ''}>\n                            <span>{notif.content}</span>\n                            {!notif.isNew && (\n                                <button onClick={() => markAsRead(notif.id)} className=\"read-button\">\n                                    읽음\n                                </button>\n                            )}\n                        </li>\n                    ))\n                ) : (\n                    <p>표시할 알림이 없습니다.</p>\n                )}\n            </ul>\n        </div>\n    );\n};\n\nexport default NotificationComponent;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,MAAM,QAAQ,gBAAgB;AACvC,OAAOC,MAAM,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,qBAAqB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACU,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACY,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;;EAEtCC,SAAS,CAAC,MAAM;IACZ,MAAMY,MAAM,GAAG,IAAIX,MAAM,CAAC;MACtBY,gBAAgB,EAAEA,CAAA,KAAM,IAAIX,MAAM,CAAC,0BAA0B,CAAC;MAC9DY,cAAc,EAAE,IAAI;MACpBC,SAAS,EAAEA,CAAA,KAAM;QACbC,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;QAChCL,MAAM,CAACM,SAAS,CAAC,SAASP,QAAQ,sBAAsB,EAAGQ,OAAO,IAAK;UACnE,MAAMC,eAAe,GAAG;YACpBC,EAAE,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;YACxBC,OAAO,EAAEL,OAAO,CAACM,IAAI;YACrBC,KAAK,EAAE;UACX,CAAC;UACDlB,gBAAgB,CAACmB,IAAI,IAAI,CAACP,eAAe,EAAE,GAAGO,IAAI,CAAC,CAAC;QACxD,CAAC,CAAC;MACN,CAAC;MACDC,YAAY,EAAGC,KAAK,IAAK;QACrBb,OAAO,CAACc,KAAK,CAAC,WAAW,EAAED,KAAK,CAAC;MACrC;IACJ,CAAC,CAAC;IAEFjB,MAAM,CAACmB,QAAQ,CAAC,CAAC;IACjBrB,cAAc,CAACE,MAAM,CAAC;IAEtB,MAAMoB,wBAAwB,GAAG,MAAAA,CAAA,KAAY;MACzC,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAuCvB,QAAQ,EAAE,CAAC;QAC/E,MAAMwB,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAClC,MAAMC,mBAAmB,GAAGF,IAAI,CAACG,GAAG,CAACC,KAAK,KAAK;UAC3ClB,EAAE,EAAEkB,KAAK,CAAClB,EAAE;UACZG,OAAO,EAAE,SAASe,KAAK,CAACf,OAAO,EAAE;UACjCE,KAAK,EAAE;QACX,CAAC,CAAC,CAAC;QACHlB,gBAAgB,CAACmB,IAAI,IAAI,CAAC,GAAGU,mBAAmB,EAAE,GAAGV,IAAI,CAAC,CAAC;MAC/D,CAAC,CAAC,OAAOG,KAAK,EAAE;QACZd,OAAO,CAACc,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACzC;IACJ,CAAC;IAEDE,wBAAwB,CAAC,CAAC;IAE1B,OAAO,MAAM;MACT,IAAIpB,MAAM,EAAE;QACRA,MAAM,CAAC4B,UAAU,CAAC,CAAC;QACnBxB,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;MACrC;IACJ,CAAC;EACL,CAAC,EAAE,CAACN,QAAQ,CAAC,CAAC;EAEd,MAAM8B,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACA,MAAMP,KAAK,CAAC,yCAAyC,EAAE;QACnDQ,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/ClB,IAAI,EAAEmB,IAAI,CAACC,SAAS,CAAC;UAAEC,MAAM,EAAEnC,QAAQ;UAAEa,OAAO,EAAE;QAAiB,CAAC;MACxE,CAAC,CAAC;IACN,CAAC,CAAC,OAAOM,KAAK,EAAE;MACZd,OAAO,CAACc,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;IACxC;EACJ,CAAC;EAED,MAAMiB,UAAU,GAAIC,cAAc,IAAK;IACnC,IAAIvC,WAAW,IAAIA,WAAW,CAACwC,SAAS,IAAID,cAAc,EAAE;MACxDvC,WAAW,CAACyC,OAAO,CAAC;QAChBC,WAAW,EAAE,mBAAmB;QAChC1B,IAAI,EAAEmB,IAAI,CAACC,SAAS,CAAC;UAAEG,cAAc,EAAEA;QAAe,CAAC;MAC3D,CAAC,CAAC;MACFxC,gBAAgB,CAACmB,IAAI,IAAIA,IAAI,CAACyB,MAAM,CAACC,CAAC,IAAIA,CAAC,CAAChC,EAAE,KAAK2B,cAAc,CAAC,CAAC;IACvE;EACJ,CAAC;EAED,oBACI5C,OAAA;IAAKkD,SAAS,EAAC,wBAAwB;IAAAC,QAAA,gBACnCnD,OAAA;MAAAmD,QAAA,EAAI;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChBvD,OAAA;MAAAmD,QAAA,GAAG,mCAAQ,eAAAnD,OAAA;QAAAmD,QAAA,EAAS5C;MAAQ;QAAA6C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAS,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAC1CvD,OAAA;MAAQwD,OAAO,EAAEnB,gBAAiB;MAAAc,QAAA,EAAC;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC1DvD,OAAA;MAAAoD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACNvD,OAAA;MAAAmD,QAAA,GAAI,6BAAO,EAAChD,aAAa,CAACsD,MAAM,EAAC,SAAE;IAAA;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxCvD,OAAA;MAAIkD,SAAS,EAAC,mBAAmB;MAAAC,QAAA,EAC5BhD,aAAa,CAACsD,MAAM,GAAG,CAAC,GACrBtD,aAAa,CAAC+B,GAAG,CAAEC,KAAK,iBACpBnC,OAAA;QAAmBkD,SAAS,EAAEf,KAAK,CAACb,KAAK,GAAG,kBAAkB,GAAG,EAAG;QAAA6B,QAAA,gBAChEnD,OAAA;UAAAmD,QAAA,EAAOhB,KAAK,CAACf;QAAO;UAAAgC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,EAC3B,CAACpB,KAAK,CAACb,KAAK,iBACTtB,OAAA;UAAQwD,OAAO,EAAEA,CAAA,KAAMb,UAAU,CAACR,KAAK,CAAClB,EAAE,CAAE;UAACiC,SAAS,EAAC,aAAa;UAAAC,QAAA,EAAC;QAErE;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CACX;MAAA,GANIpB,KAAK,CAAClB,EAAE;QAAAmC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAOb,CACP,CAAC,gBAEFvD,OAAA;QAAAmD,QAAA,EAAG;MAAa;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IACtB;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEd,CAAC;AAACrD,EAAA,CApGID,qBAAqB;AAAAyD,EAAA,GAArBzD,qBAAqB;AAsG3B,eAAeA,qBAAqB;AAAC,IAAAyD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}